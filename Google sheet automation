function countSpecificValues() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet15 = ss.getSheetByName("Sheet15");
  const roleSheet = ss.getSheetByName("Role");
  const sourceSheets = sheet15.getRange("C20:C28").getValues().flat(); // Source sheets listed in column C
  const outputRange = sheet15.getRange("E20:E28");
  const referenceRole = sheet15.getRange("D20:D28").getValues().flat(); // Roles to match in D20:D28
  const targetValue = sheet15.getRange("A1").getValue(); // Value to match in A1
  const countValues = ["Mrng1", "Mrng2", "Evng", "Ngt"];
  const roleLookup = roleSheet.getRange("A2:B").getValues();

  const results = [];

  sourceSheets.forEach((sheetName, index) => {
    if (!sheetName) return; // Skip empty rows
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) {
      results.push(0);
      return;
    }

    const data = sheet.getRange(3, 1, sheet.getLastRow() - 2, sheet.getLastColumn()).getValues(); // Rows 3 onward
    const headers = sheet.getRange(2, 27, 1, sheet.getLastColumn() - 26).getValues()[0]; // Headers from AC2:BM2
    const columnF = sheet.getRange(3, 6, sheet.getLastRow() - 2, 1).getValues(); // Column F
    const columnC = sheet.getRange(3, 3, sheet.getLastRow() - 2, 1).getValues(); // Column C

    let count = 0;

    data.forEach((row, rowIndex) => {
      const leftbValue = parseInt(columnF[rowIndex][0]?.toString().substring(0, 2), 10);
      if (isNaN(leftbValue) || leftbValue < 27) return; // Skip rows not meeting the >=27 condition
      if (columnC[rowIndex][0] !== targetValue) return; // Skip rows not matching A1

      headers.forEach((header, colIndex) => {
        const roleMatch = roleLookup.find(r => r[0] === header)?.[1]; // Match header with role
        if (roleMatch !== referenceRole[index]) return; // Skip columns where roles don't match

        if (countValues.includes(row[colIndex + 26])) {
          count++; // Increment if value matches one of the target values
        }
      });
    });

    results.push(count);
  });

  outputRange.setValues(results.map(r => [r]));
}
